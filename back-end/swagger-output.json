{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "BED EP1 API - Martinus Nordg√•rd",
    "description": "Documentation for the BED Exam Project API. Contains all nessecary information about how to use this API successfully. Documentation <del>automatically</del> partially generated by the swagger-autogen module and partially written by the Author."
  },
  "host": "localhost:3001",
  "basePath": "/",
  "tags": [
    {
      "name": "Deployment and Maintenance",
      "description": "Operations related app deployment and troubleshooting"
    },
    {
      "name": "Authorization",
      "description": "Operations related to signup and login."
    },
    {
      "name": "Brands",
      "description": "Operations related to brands."
    },
    {
      "name": "Carts",
      "description": "Operations related to carts."
    },
    {
      "name": "Categories",
      "description": "Operations related to categories."
    },
    {
      "name": "Memberships",
      "description": "Operations related to memberships."
    },
    {
      "name": "Orders",
      "description": "Operations related to orders."
    },
    {
      "name": "Products",
      "description": "Operations related to products."
    },
    {
      "name": "Roles",
      "description": "Operations related to roles."
    },
    {
      "name": "Users",
      "description": "Operations related to users."
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/init": {
      "post": {
        "tags": [
          "Deployment and Maintenance"
        ],
        "summary": "Populate database ",
        "description": "This endpoint populated the database with Roles, Memberships, an Admin User, Products from the Noroff API and Order Statuses. This is achieved with running methods from various service files.",
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Database tables have been populated successfully"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Error details"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/FAKEinit": {
      "post": {
        "tags": [
          "Deployment and Maintenance"
        ],
        "summary": "Populates database with local data. Used for testing.",
        "description": "Uses various services to populate the database, but doesn't not involve external API. Uses locally stored data to populate the products table",
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Database tables have been populated successfully"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Error details"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "Register a new user",
        "description": "Creates a new user account with provided details and returns a JWT token upon successful registration.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Request body for user registration.",
            "schema": {
              "type": "object",
              "properties": {
                "firstname": {
                  "type": "string",
                  "example": "John"
                },
                "lastname": {
                  "type": "string",
                  "example": "Doe"
                },
                "username": {
                  "type": "string",
                  "example": "johndoe123"
                },
                "email": {
                  "type": "string",
                  "example": "johndoe@example.com"
                },
                "password": {
                  "type": "string",
                  "example": "StrongPassword123!"
                },
                "address": {
                  "type": "string",
                  "example": "123 Main St, City, Country"
                },
                "phone": {
                  "type": "string",
                  "example": "1234567890"
                }
              },
              "required": [
                "firstname",
                "lastname",
                "username",
                "email",
                "password",
                "address",
                "phone"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User successfully registered",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 201
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "User created successfully"
                    },
                    "token": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    },
                    "userId": {
                      "type": "number",
                      "example": 1
                    },
                    "username": {
                      "type": "string",
                      "example": "johndoe123"
                    },
                    "roleId": {
                      "type": "number",
                      "example": 2
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 400
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Invalid email format"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "409": {
            "description": "Conflict - Username or email already in use",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 409
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Email already used"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "User login",
        "description": "Authenticates a user using their email or username and returns a JWT token upon successful login.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "User login request body. The user can log in using either their email or username along with their password.",
            "schema": {
              "type": "object",
              "properties": {
                "emailOrUsername": {
                  "type": "string",
                  "example": "johndoe@example.com"
                },
                "password": {
                  "type": "string",
                  "example": "StrongPassword123!"
                }
              },
              "required": [
                "emailOrUsername",
                "password"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully logged in",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "You are logged in"
                    },
                    "Id": {
                      "type": "number",
                      "example": 1
                    },
                    "email": {
                      "type": "string",
                      "example": "johndoe@example.com"
                    },
                    "username": {
                      "type": "string",
                      "example": "johndoe123"
                    },
                    "fullName": {
                      "type": "string",
                      "example": "John Doe"
                    },
                    "role": {
                      "type": "number",
                      "example": 2
                    },
                    "token": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized - User not found or incorrect password",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 401
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "User not found or password incorrect"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Error message from the server"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/users/": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieve all users",
        "description": "Fetch all users from the database.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved users.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Users found"
                    },
                    "users": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number",
                            "example": 2
                          },
                          "Username": {
                            "type": "string",
                            "example": "user123"
                          },
                          "EncryptedPassword": {
                            "type": "string",
                            "example": "8e85b2d8dbd679716888c37d262bdb1f7cd84e7e3c28339d971fac741650d98c"
                          },
                          "Salt": {
                            "type": "string",
                            "example": "215d32304553f246781f52d387790a4a"
                          },
                          "Email": {
                            "type": "string",
                            "example": "Joe@gmail.com"
                          },
                          "FirstName": {
                            "type": "string",
                            "example": "Joe"
                          },
                          "LastName": {
                            "type": "string",
                            "example": "Smith"
                          },
                          "Address": {
                            "type": "string",
                            "example": "123 Street, City"
                          },
                          "Telephone": {
                            "type": "string",
                            "example": "242424"
                          },
                          "MembershipId": {
                            "type": "number",
                            "example": 1
                          },
                          "RoleId": {
                            "type": "number",
                            "example": 2
                          },
                          "createdAt": {
                            "type": "string",
                            "example": "2025-03-06T14:58:26.000Z"
                          },
                          "updatedAt": {
                            "type": "string",
                            "example": "2025-03-06T14:58:26.000Z"
                          },
                          "RoleName": {
                            "type": "string",
                            "example": "User"
                          },
                          "MembershipName": {
                            "type": "string",
                            "example": "Bronze"
                          },
                          "TotalItemsPurchased": {
                            "type": "string",
                            "example": "0"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 404
                },
                "execution": {
                  "type": "string",
                  "example": "database called successfully"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "No users found"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Internal server error while fetching users.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "An error occurred while fetching users"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieve all users",
        "description": "Fetch all users from the database.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved users.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "User found"
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number",
                          "example": 2
                        },
                        "Username": {
                          "type": "string",
                          "example": "user123"
                        },
                        "EncryptedPassword": {
                          "type": "string",
                          "example": "8e85b2d8dbd679716888c37d262bdb1f7cd84e7e3c28339d971fac741650d98c"
                        },
                        "Salt": {
                          "type": "string",
                          "example": "215d32304553f246781f52d387790a4a"
                        },
                        "Email": {
                          "type": "string",
                          "example": "Joe@gmail.com"
                        },
                        "FirstName": {
                          "type": "string",
                          "example": "Joe"
                        },
                        "LastName": {
                          "type": "string",
                          "example": "Smith"
                        },
                        "Address": {
                          "type": "string",
                          "example": "123 Street, City"
                        },
                        "Telephone": {
                          "type": "string",
                          "example": "242424"
                        },
                        "MembershipId": {
                          "type": "number",
                          "example": 1
                        },
                        "RoleId": {
                          "type": "number",
                          "example": 2
                        },
                        "createdAt": {
                          "type": "string",
                          "example": "2025-03-06T14:58:26.000Z"
                        },
                        "updatedAt": {
                          "type": "string",
                          "example": "2025-03-06T14:58:26.000Z"
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 404
                },
                "execution": {
                  "type": "string",
                  "example": "database called successfully"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Internal server error while fetching users.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "An error occurred while fetching user"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/users/{id}": {
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a specific user",
        "description": "Delete a user by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The ID of the user to delete."
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the user.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User deleted successfully"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error while deleting user.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "An error occurred while deleting the user"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update a user",
        "description": "Update the details of an existing user.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The ID of the user to update."
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "User details to update.",
            "schema": {
              "type": "object",
              "properties": {
                "firstname": {
                  "type": "string",
                  "example": "John"
                },
                "lastname": {
                  "type": "string",
                  "example": "Doe"
                },
                "username": {
                  "type": "string",
                  "example": "johndoe"
                },
                "email": {
                  "type": "string",
                  "example": "johndoe@example.com"
                },
                "address": {
                  "type": "string",
                  "example": "123 Main St"
                },
                "telephone": {
                  "type": "string",
                  "example": "123456789"
                },
                "membershipId": {
                  "type": "number",
                  "example": 1
                },
                "roleId": {
                  "type": "number",
                  "example": 2
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated user details.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User updated successfully"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error while updating user details.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "An error occurred while updating the user"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/products/": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Retrieve all products",
        "description": "Retrieve all products for the authenticated user.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved products.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "userId": {
                      "type": "number",
                      "example": 1
                    },
                    "result": {
                      "type": "string",
                      "example": "Products found"
                    },
                    "products": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number",
                            "example": 1
                          },
                          "name": {
                            "type": "string",
                            "example": "iPhone 6s Plus 16Gb"
                          },
                          "description": {
                            "type": "string",
                            "example": "3D Touch. 12MP photos. 4K video."
                          },
                          "PriceWithoutDiscount": {
                            "type": "string",
                            "example": "649.00"
                          },
                          "unitprice": {
                            "type": "string",
                            "example": "649.00"
                          },
                          "date_added": {
                            "type": "string",
                            "example": "2022-05-01T00:00:00"
                          },
                          "imgurl": {
                            "type": "string",
                            "example": "http://images.restapi.co.za/products/product-iphone.png"
                          },
                          "quantity": {
                            "type": "number",
                            "example": 2
                          },
                          "isdeleted": {
                            "type": "number",
                            "example": 0
                          },
                          "createdAt": {
                            "type": "string",
                            "example": "2025-03-04T01:21:02.000Z"
                          },
                          "BrandId": {
                            "type": "number",
                            "example": 1
                          },
                          "CategoryId": {
                            "type": "number",
                            "example": 1
                          },
                          "brand": {
                            "type": "string",
                            "example": "Apple"
                          },
                          "category": {
                            "type": "string",
                            "example": "Phones"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No products found.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 404
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "No products found"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Internal server error while fetching products.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Failed to retrieve products"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Create a product",
        "description": "Create a new product.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Product A"
                },
                "description": {
                  "type": "string",
                  "example": "A sample product"
                },
                "quantity": {
                  "type": "number",
                  "example": 10
                },
                "unitprice": {
                  "type": "number",
                  "example": 19.99
                },
                "imgurl": {
                  "type": "string",
                  "example": "http://example.com/image.jpg"
                },
                "brandid": {
                  "type": "number",
                  "example": 1
                },
                "categoryid": {
                  "type": "number",
                  "example": 2
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Product created successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 201
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Product created successfully"
                    },
                    "id": {
                      "type": "number",
                      "example": 1
                    },
                    "name": {
                      "type": "string",
                      "example": "Product A"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error while creating product.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "An error occurred while creating the product"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/products/{id}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Retrieve a single product by ID",
        "description": "Retrieve a single product for the authenticated user.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Product ID to fetch",
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "integer"
                },
                "example": {
                  "type": "number",
                  "example": 1
                }
              },
              "required": [
                "type",
                "example"
              ]
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved product.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "userId": {
                      "type": "number",
                      "example": 1
                    },
                    "result": {
                      "type": "string",
                      "example": "Product found"
                    },
                    "product": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number",
                          "example": 1
                        },
                        "name": {
                          "type": "string",
                          "example": "iPhone 6s Plus 16Gb"
                        },
                        "description": {
                          "type": "string",
                          "example": "3D Touch. 12MP photos. 4K video."
                        },
                        "PriceWithoutDiscount": {
                          "type": "string",
                          "example": "649.00"
                        },
                        "unitprice": {
                          "type": "string",
                          "example": "649.00"
                        },
                        "date_added": {
                          "type": "string",
                          "example": "2022-05-01T00:00:00"
                        },
                        "imgurl": {
                          "type": "string",
                          "example": "http://images.restapi.co.za/products/product-iphone.png"
                        },
                        "quantity": {
                          "type": "number",
                          "example": 2
                        },
                        "isdeleted": {
                          "type": "number",
                          "example": 0
                        },
                        "createdAt": {
                          "type": "string",
                          "example": "2025-03-04T01:21:02.000Z"
                        },
                        "BrandId": {
                          "type": "number",
                          "example": 1
                        },
                        "CategoryId": {
                          "type": "number",
                          "example": 1
                        },
                        "brand": {
                          "type": "string",
                          "example": "Apple"
                        },
                        "category": {
                          "type": "string",
                          "example": "Phones"
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Product not found.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 404
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Product not found"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Internal server error while fetching the product.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Failed to retrieve product"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Products"
        ],
        "summary": "Soft delete a product",
        "description": "Soft delete a product by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID of the product to delete"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Product deleted successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Product deleted successfully"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error while deleting product.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "An error occurred while deleting the product"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Products"
        ],
        "summary": "Update a product",
        "description": "Update a product by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID of the product to update"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Updated Product"
                },
                "description": {
                  "type": "string",
                  "example": "Updated description"
                },
                "quantity": {
                  "type": "number",
                  "example": 15
                },
                "unitprice": {
                  "type": "number",
                  "example": 29.99
                },
                "imgurl": {
                  "type": "string",
                  "example": "http://example.com/new-image.jpg"
                },
                "brandid": {
                  "type": "number",
                  "example": 1
                },
                "categoryid": {
                  "type": "number",
                  "example": 2
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product updated successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Product updated successfully"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error while updating product.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "An error occurred while updating the product"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/products/addProductsFromAPI": {
      "post": {
        "tags": [
          "Deployment and Maintenance"
        ],
        "summary": "Populate products. Used for testing.",
        "description": "Fetches multiple real products from an external API and adds them to the database.",
        "responses": {
          "201": {
            "description": "Products successfully added",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 201
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number",
                        "example": 1
                      },
                      "name": {
                        "type": "string",
                        "example": "Sample Product"
                      },
                      "description": {
                        "type": "string",
                        "example": "A sample product"
                      },
                      "price": {
                        "type": "number",
                        "example": 100
                      },
                      "quantity": {
                        "type": "number",
                        "example": 10
                      },
                      "brand": {
                        "type": "string",
                        "example": "Brand Name"
                      },
                      "category": {
                        "type": "string",
                        "example": "Category Name"
                      },
                      "imgurl": {
                        "type": "string",
                        "example": "https://example.com/image.jpg"
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Failed to add multiple products",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Failed to add multiple products"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/products/fakeAddProductsFromAPI": {
      "post": {
        "tags": [
          "Deployment and Maintenance"
        ],
        "summary": "Populate products. Used for testing.",
        "description": "Reads local json file with multiple products and adds them to the database.",
        "responses": {
          "201": {
            "description": "Products successfully added",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 201
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number",
                        "example": 1
                      },
                      "name": {
                        "type": "string",
                        "example": "Sample Product"
                      },
                      "description": {
                        "type": "string",
                        "example": "A sample product"
                      },
                      "price": {
                        "type": "number",
                        "example": 100
                      },
                      "quantity": {
                        "type": "number",
                        "example": 10
                      },
                      "brand": {
                        "type": "string",
                        "example": "Brand Name"
                      },
                      "category": {
                        "type": "string",
                        "example": "Category Name"
                      },
                      "imgurl": {
                        "type": "string",
                        "example": "https://example.com/image.jpg"
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Failed to add multiple products",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Failed to add multiple products"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/products/search": {
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Search",
        "description": "Search for products based on a query. The search is also based on your role, and does not returned soft-deleted items if you are not admin.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "search",
            "in": "query",
            "required": true,
            "description": "Search query string",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved search results.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "itemsFound": {
                  "type": "number",
                  "example": 2
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "userId": {
                      "type": "number",
                      "example": 1
                    },
                    "result": {
                      "type": "string",
                      "example": "Products found"
                    },
                    "products": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "example": "iPhone SE 32/64Gb"
                          },
                          "id": {
                            "type": "number",
                            "example": 3
                          },
                          "description": {
                            "type": "string",
                            "example": "A big step for small"
                          },
                          "PriceWithoutDiscount": {
                            "type": "string",
                            "example": "499.00"
                          },
                          "unitprice": {
                            "type": "string",
                            "example": "384.2300"
                          },
                          "date_added": {
                            "type": "string",
                            "example": "2021-09-15T00:00:00"
                          },
                          "imgurl": {
                            "type": "string",
                            "example": "http://images.restapi.co.za/products/product-iphone-se.png"
                          },
                          "quantity": {
                            "type": "number",
                            "example": 15
                          },
                          "isdeleted": {
                            "type": "number",
                            "example": 0
                          },
                          "createdAt": {
                            "type": "string",
                            "example": "2025-02-28T23:33:30.000Z"
                          },
                          "BrandId": {
                            "type": "number",
                            "example": 1
                          },
                          "CategoryId": {
                            "type": "number",
                            "example": 1
                          },
                          "brand": {
                            "type": "string",
                            "example": "Apple"
                          },
                          "category": {
                            "type": "string",
                            "example": "21"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal server error while searching products.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Failed to search products"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/products/realdelete/{id}": {
      "delete": {
        "tags": [
          "Products"
        ],
        "summary": "Hard delete a product",
        "description": "Hard delete a product by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID of the product to delete"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Product deleted successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Product deleted successfully"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error while deleting product.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "An error occurred while deleting the product"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/brands/": {
      "get": {
        "tags": [
          "Brands"
        ],
        "summary": "Retrieve all brands",
        "description": "Fetches a list of all available brands.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Brands successfully retrieved",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Brands found"
                    },
                    "brands": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number",
                            "example": 2
                          },
                          "name": {
                            "type": "string",
                            "example": "Brand B"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 404
                },
                "execution": {
                  "type": "string",
                  "example": "database called successfully"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "No brands found"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "An error occurred while fetching brands"
                    },
                    "error": {
                      "type": "string",
                      "example": "Error details"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Brands"
        ],
        "summary": "Create a new brand",
        "description": "Creates a new brand with the provided name.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Request body for adding brand.",
            "schema": {
              "type": "object",
              "properties": {
                "brandname": {
                  "type": "string",
                  "example": "Sony"
                }
              },
              "required": [
                "brandname"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Brand successfully created",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Brand created"
                    },
                    "id": {
                      "type": "number",
                      "example": 123
                    },
                    "name": {
                      "type": "string",
                      "example": "Sony"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server error",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "An error occurred while creating brand"
                    },
                    "error": {
                      "type": "string",
                      "example": "Error details"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/brands/{id}": {
      "put": {
        "tags": [
          "Brands"
        ],
        "summary": "Update a brand",
        "description": "Updates the name of a brand by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The ID of the brand to update"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Request body for updating brand.",
            "schema": {
              "type": "object",
              "properties": {
                "brandname": {
                  "type": "string",
                  "example": "Dyson"
                }
              },
              "required": [
                "brandname"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Brand successfully updated",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Brand updated"
                    },
                    "id": {
                      "type": "number",
                      "example": 123
                    },
                    "name": {
                      "type": "string",
                      "example": "Dyson"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server error",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "An error occurred while updating brand"
                    },
                    "error": {
                      "type": "string",
                      "example": "Error details"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Brands"
        ],
        "summary": "Delete a brand",
        "description": "Deletes a brand by its ID. Only accessible to admin users.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The ID of the brand to delete"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Brand successfully deleted",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Brand successfully deleted"
                    },
                    "id": {
                      "type": "number",
                      "example": 123
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server error",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "An error occurred while deleting brand"
                    },
                    "error": {
                      "type": "string",
                      "example": "Error details"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/categories/": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Retrieve all categories",
        "description": "Retrieves all categories stored in the database.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved categories.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Categories found"
                    },
                    "categories": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number",
                            "example": 2
                          },
                          "name": {
                            "type": "string",
                            "example": "Laptops"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 404
                },
                "execution": {
                  "type": "string",
                  "example": "database called successfully"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "No categories found"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Internal server error while fetching categories.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "An error occurred while fetching categories."
                    },
                    "error": {
                      "type": "string",
                      "example": "Detailed error message here."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Categories"
        ],
        "summary": "Create a category",
        "description": "Creates a new product category.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Details required to create a new category.",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "New Category"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created a new category.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 201
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Category created"
                    },
                    "id": {
                      "type": "number",
                      "example": 1
                    },
                    "name": {
                      "type": "string",
                      "example": "New Category"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Invalid input, category name is required.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "fail"
                },
                "statuscode": {
                  "type": "number",
                  "example": 400
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Category name is required."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error while creating category.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "An error occurred while creating category."
                    },
                    "error": {
                      "type": "string",
                      "example": "Detailed error message here."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/categories/{id}": {
      "put": {
        "tags": [
          "Categories"
        ],
        "summary": "Update a category",
        "description": "Updates an existing category by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The ID of the category to update."
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Details required to update the category.",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Updated Category Name"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the category.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Category updated"
                    },
                    "id": {
                      "type": "number",
                      "example": 1
                    },
                    "name": {
                      "type": "string",
                      "example": "Updated Category Name"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error while updating the category.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "An error occurred while updating category"
                    },
                    "error": {
                      "type": "string",
                      "example": "Detailed error message here."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Categories"
        ],
        "summary": "Delete a category",
        "description": "Deletes an existing category by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The ID of the category to update."
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Category successfully deleted",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Category deleted successfully"
                    },
                    "id": {
                      "type": "number",
                      "example": 123
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server error",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "An error occurred while deleting category"
                    },
                    "error": {
                      "type": "string",
                      "example": "Error message"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/carts/": {
      "get": {
        "tags": [
          "Carts"
        ],
        "summary": "Retrieve the cart of the authenticated user",
        "description": "Fetches the cart details of the currently logged-in user, including products added to the cart.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved cart",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Products in cart found"
                    },
                    "userid": {
                      "type": "number",
                      "example": 1
                    },
                    "cart": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "productId": {
                            "type": "number",
                            "example": 101
                          },
                          "name": {
                            "type": "string",
                            "example": "Product Name"
                          },
                          "quantity": {
                            "type": "number",
                            "example": 2
                          },
                          "price": {
                            "type": "number",
                            "example": 50
                          }
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized access - User is not authenticated",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 401
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 404
                },
                "execution": {
                  "type": "string",
                  "example": "database called successfully"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "No carts found"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/carts/add": {
      "post": {
        "tags": [
          "Carts"
        ],
        "summary": "Add a product to the user‚Äôs cart",
        "description": "Allows an authenticated user to add a product to their cart. If the product already exists in the cart, the quantity will be updated.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Product data to be added to the cart",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "example": 101
                },
                "quantity": {
                  "type": "number",
                  "example": 2
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product successfully added to cart",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Product added to cart successfully"
                    },
                    "product": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number",
                          "example": 2
                        }
                      }
                    },
                    "cartQuantity": {
                      "type": "number",
                      "example": 1
                    },
                    "remainingStock": {
                      "type": "number",
                      "example": 9
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request - Missing required product ID",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 400
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Only 10 units are available in stock."
                    },
                    "availableStock": {
                      "type": "number",
                      "example": 10
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/carts/checkout/now": {
      "post": {
        "tags": [
          "Carts"
        ],
        "summary": "Checkout and place an order",
        "description": "Allows the user to checkout and place an order using the products in their cart.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Order successfully placed",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "orderId": {
                      "type": "number",
                      "example": 1234
                    },
                    "message": {
                      "type": "string",
                      "example": "Order placed successfully"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request - Cart is empty",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 400
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Your cart is empty. Add products before checkout."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/roles/": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Retrieve all roles",
        "description": "Retrieve all roles from the database.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved roles.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Roles found"
                    },
                    "roles": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number",
                            "example": 2
                          },
                          "name": {
                            "type": "string",
                            "example": "User"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 404
                },
                "execution": {
                  "type": "string",
                  "example": "database called successfully"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "No roles found"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Internal server error while fetching roles.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "An error occurred while fetching roles"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Roles"
        ],
        "summary": "Create role",
        "description": "Create a new role.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Role details",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Moderator"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created role.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Role created"
                    },
                    "role": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number",
                          "example": 3
                        },
                        "name": {
                          "type": "string",
                          "example": "Moderator"
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error while creating role.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "An error occurred while creating role"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/roles/{id}": {
      "put": {
        "tags": [
          "Roles"
        ],
        "summary": "Update a role",
        "description": "Update an existing role.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The ID of the role to update."
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Updated role details.",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Super Admin"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated role.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Role updated"
                    },
                    "role": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number",
                          "example": 1
                        },
                        "name": {
                          "type": "string",
                          "example": "Super Admin"
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error while updating role.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "An error occurred while updating role"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Roles"
        ],
        "summary": "Delete a role",
        "description": "Delete a role by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The ID of the role to delete."
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted role.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Role deleted successfully"
                    },
                    "id": {
                      "type": "number",
                      "example": 3
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error while deleting role.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "An error occurred while deleting role"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/orders/": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Retrieve all order",
        "description": "Fetch all orders from the database.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved orders.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Orders found"
                    },
                    "orders": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number",
                            "example": 2
                          },
                          "uniqueId": {
                            "type": "string",
                            "example": "j483mdlq"
                          },
                          "capturedMembershipId": {
                            "type": "number",
                            "example": 3
                          },
                          "capturedMembershipName": {
                            "type": "string",
                            "example": "Gold"
                          },
                          "capturedMembershipDiscount": {
                            "type": "string",
                            "example": "30%"
                          },
                          "createdAt": {
                            "type": "string",
                            "example": "2025-02-04T16:34:16.000Z"
                          },
                          "updatedAt": {
                            "type": "string",
                            "example": "2025-02-07T05:12:14.000Z"
                          },
                          "OrderStatusId": {
                            "type": "number",
                            "example": 2
                          },
                          "UserId": {
                            "type": "number",
                            "example": 7
                          },
                          "OrderStatusName": {
                            "type": "string",
                            "example": "Ordered"
                          },
                          "TotalQuantity": {
                            "type": "string",
                            "example": "7"
                          },
                          "TotalPrice": {
                            "type": "string",
                            "example": "700.00"
                          },
                          "OriginalPrice": {
                            "type": "string",
                            "example": "1000.00"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 404
                },
                "execution": {
                  "type": "string",
                  "example": "database called successfully"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "No orders found"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Internal server error while fetching orders.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Failed to retrieve orders"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/orders/{orderId}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Retrieve all order",
        "description": "Fetch a single order from the database.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The ID of the order to retrieve."
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved orders.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Order found"
                    },
                    "orders": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number",
                            "example": 1
                          },
                          "uniqueId": {
                            "type": "string",
                            "example": "8aaaad1b"
                          },
                          "capturedMembershipId": {
                            "type": "number",
                            "example": 2
                          },
                          "capturedMembershipName": {
                            "type": "string",
                            "example": "Silver"
                          },
                          "capturedMembershipDiscount": {
                            "type": "string",
                            "example": "15%"
                          },
                          "createdAt": {
                            "type": "string",
                            "example": "2025-02-22T19:34:23.000Z"
                          },
                          "updatedAt": {
                            "type": "string",
                            "example": "2025-02-28T20:12:14.000Z"
                          },
                          "OrderStatusId": {
                            "type": "number",
                            "example": 1
                          },
                          "UserId": {
                            "type": "number",
                            "example": 1
                          },
                          "OrderStatusName": {
                            "type": "string",
                            "example": "In Progress"
                          },
                          "TotalQuantity": {
                            "type": "string",
                            "example": "4"
                          },
                          "TotalPrice": {
                            "type": "string",
                            "example": "850.00"
                          },
                          "OriginalPrice": {
                            "type": "string",
                            "example": "1000.00"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 404
                },
                "execution": {
                  "type": "string",
                  "example": "database called successfully"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Order not found"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Internal server error while fetching orders.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Failed to retrieve products"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/orders/my": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Retrieve user",
        "description": "Fetch orders belonging to the authenticated user.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user orders.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Orders found"
                    },
                    "orders": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number",
                            "example": 1
                          },
                          "userId": {
                            "type": "number",
                            "example": 10
                          },
                          "statusId": {
                            "type": "number",
                            "example": 2
                          },
                          "createdAt": {
                            "type": "string",
                            "example": "2024-03-01T12:00:00Z"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 404
                },
                "execution": {
                  "type": "string",
                  "example": "database called successfully"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "No orders found for this user"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Internal server error while fetching user orders.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Failed to retrieve orders"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/orders/my/{orderId}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Retrieve specific order",
        "description": "Fetch details of a single order belonging to the authenticated user.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The ID of the order to retrieve."
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved order details.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Products found"
                    },
                    "orders": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "productId": {
                            "type": "number",
                            "example": 8
                          },
                          "quantity": {
                            "type": "number",
                            "example": 1
                          }
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 404
                },
                "execution": {
                  "type": "string",
                  "example": "database called successfully"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Order not found"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Internal server error while fetching order.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Failed to retrieve order"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/orders/inspect/{orderId}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Retrieve specific order",
        "description": "Lets an admin fetch details of a specific order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The ID of the order to retrieve."
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved order details.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Products found"
                    },
                    "orders": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "productId": {
                            "type": "number",
                            "example": 8
                          },
                          "quantity": {
                            "type": "number",
                            "example": 1
                          }
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 404
                },
                "execution": {
                  "type": "string",
                  "example": "database called successfully"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Order not found"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Internal server error while fetching order.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Failed to retrieve order"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/orders/{id}": {
      "put": {
        "tags": [
          "Orders"
        ],
        "summary": "Update order status",
        "description": "Update the status of an existing order.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The ID of the order to update."
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "New order status ID.",
            "schema": {
              "type": "object",
              "properties": {
                "statusid": {
                  "type": "number",
                  "example": 2
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated order status.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Order status updated successfully"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error while updating order status.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Error message here"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Orders"
        ],
        "summary": "Delete order",
        "description": "Delete an order by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The ID of the order to delete."
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the order.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Order deleted successfully"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error while deleting order.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Error message here"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/memberships/": {
      "get": {
        "tags": [
          "Memberships"
        ],
        "summary": "Retrieve all memberships",
        "description": "Fetch all memberships stored in the database.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved memberships.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Memberships found"
                    },
                    "memberships": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number",
                            "example": 2
                          },
                          "name": {
                            "type": "string",
                            "example": "Silver"
                          },
                          "discount": {
                            "type": "string",
                            "example": "5%"
                          },
                          "threshold": {
                            "type": "number",
                            "example": 50
                          }
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 404
                },
                "execution": {
                  "type": "string",
                  "example": "database called successfully"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "No memberships found"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Internal server error while fetching memberships.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "An error occurred while fetching memberships"
                    },
                    "error": {
                      "type": "string",
                      "example": "Detailed error message here."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Memberships"
        ],
        "summary": "Create membership",
        "description": "Create a new membership.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Membership details.",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Gold"
                },
                "discount": {
                  "type": "string",
                  "example": "10%"
                },
                "threshold": {
                  "type": "number",
                  "example": 100
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created a membership.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Membership created"
                    },
                    "membership": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number",
                          "example": 1
                        },
                        "name": {
                          "type": "string",
                          "example": "Gold"
                        },
                        "discount": {
                          "type": "string",
                          "example": "10%"
                        },
                        "threshold": {
                          "type": "number",
                          "example": 100
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error while creating membership.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "An error occurred while creating membership"
                    },
                    "error": {
                      "type": "string",
                      "example": "Detailed error message here."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/memberships/{id}": {
      "put": {
        "tags": [
          "Memberships"
        ],
        "summary": "Update membership",
        "description": "Update an existing membership by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The ID of the membership to update."
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Updated membership details.",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Platinum"
                },
                "discount": {
                  "type": "string",
                  "example": "45%"
                },
                "threshold": {
                  "type": "number",
                  "example": 50
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the membership.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Membership updated"
                    },
                    "membership": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number",
                          "example": 1
                        },
                        "name": {
                          "type": "string",
                          "example": "Platinum"
                        },
                        "discount": {
                          "type": "string",
                          "example": "45%"
                        },
                        "threshold": {
                          "type": "number",
                          "example": 50
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error while updating membership.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "An error occurred while updating membership"
                    },
                    "error": {
                      "type": "string",
                      "example": "Detailed error message here."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Memberships"
        ],
        "summary": "Delete membership",
        "description": "Delete a membership by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The ID of the membership to delete."
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the membership.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Membership deleted"
                    },
                    "id": {
                      "type": "number",
                      "example": 1
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error while deleting membership.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "An error occurred while deleting membership"
                    },
                    "error": {
                      "type": "string",
                      "example": "Detailed error message here."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/orderstatuses/": {
      "get": {
        "tags": [
          "Orderstatuses"
        ],
        "summary": "Retrieve all orderstatuses",
        "description": "Fetches a list of all available orderstatuses.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Orderstatuses successfully retrieved",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Orderstatuses found"
                    },
                    "orderstatuses": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number",
                            "example": 2
                          },
                          "OrderStatus": {
                            "type": "string",
                            "example": "Ordered"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 404
                },
                "execution": {
                  "type": "string",
                  "example": "database called successfully"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "No orderstatuses found"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "An error occurred while fetching orderstatuses"
                    },
                    "error": {
                      "type": "string",
                      "example": "Error details"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Orderstatuses"
        ],
        "summary": "Create a new orderstatus",
        "description": "Creates a new orderstatus with the provided name.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Request body for adding orderstatus.",
            "schema": {
              "type": "object",
              "properties": {
                "orderstatusname": {
                  "type": "string",
                  "example": "Returned"
                }
              },
              "required": [
                "orderstatusname"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Orderstatus successfully created",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Orderstatus created"
                    },
                    "id": {
                      "type": "number",
                      "example": 4
                    },
                    "name": {
                      "type": "string",
                      "example": "Returned"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server error",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "An error occurred while creating orderstatus"
                    },
                    "error": {
                      "type": "string",
                      "example": "Error details"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/orderstatuses/{id}": {
      "put": {
        "tags": [
          "Orderstatuses"
        ],
        "summary": "Update a orderstatus",
        "description": "Updates the name of a orderstatus by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The ID of the orderstatus to update"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Request body for updating orderstatus.",
            "schema": {
              "type": "object",
              "properties": {
                "orderstatusname": {
                  "type": "string",
                  "example": "Cancelled"
                }
              },
              "required": [
                "orderstatusname"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Orderstatus successfully updated",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Orderstatus updated"
                    },
                    "id": {
                      "type": "number",
                      "example": 4
                    },
                    "name": {
                      "type": "string",
                      "example": "Cancelled"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server error",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "An error occurred while updating orderstatus"
                    },
                    "error": {
                      "type": "string",
                      "example": "Error details"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Orderstatuses"
        ],
        "summary": "Delete a orderstatus",
        "description": "Deletes a orderstatus by its ID. Only accessible to admin users.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The ID of the orderstatus to delete"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Orderstatus successfully deleted",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Orderstatus successfully deleted"
                    },
                    "id": {
                      "type": "number",
                      "example": 4
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server error",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "An error occurred while deleting orderstatus"
                    },
                    "error": {
                      "type": "string",
                      "example": "Error details"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    }
  }
}